{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WebThings Documentation Welcome to the documentation for the WebThings project. WebThings is an open platform for monitoring and controlling devices over the web. WebThings Gateway Host your own private smart home. WebThings Gateway is a software distribution for smart home hubs focused on privacy, security and interoperability. It enables you to securely monitor and control your home over the web, without a middleman. WebThings Framework Build your own web things. WebThings Framework is a collection of re-usable software components to help developers build their own web things. W3C Web of Things The W3C Web of Things is the collection of open standards upon which the WebThings platform is built. \ud83d\udedf For support, please sign up to our forum , chat with us in the #iot:mozilla.org channel on Matrix, or post issues on GitHub.","title":"WebThings Documentation"},{"location":"#webthings-documentation","text":"Welcome to the documentation for the WebThings project. WebThings is an open platform for monitoring and controlling devices over the web.","title":"WebThings Documentation"},{"location":"#webthings-gateway","text":"Host your own private smart home. WebThings Gateway is a software distribution for smart home hubs focused on privacy, security and interoperability. It enables you to securely monitor and control your home over the web, without a middleman.","title":"WebThings Gateway"},{"location":"#webthings-framework","text":"Build your own web things. WebThings Framework is a collection of re-usable software components to help developers build their own web things.","title":"WebThings Framework"},{"location":"#w3c-web-of-things","text":"The W3C Web of Things is the collection of open standards upon which the WebThings platform is built. \ud83d\udedf For support, please sign up to our forum , chat with us in the #iot:mozilla.org channel on Matrix, or post issues on GitHub.","title":"W3C Web of Things"},{"location":"framework/arduino/","text":"webthing-arduino Installation Arduino IDE Add the webthing and ArduinoJson libraries to your project. PlatformIO Add the webthing-arduino and ArduinoJson libraries to your project. Example #define LARGE_JSON_BUFFERS 1 #include <Arduino.h> #include <Thing.h> #include <WebThingAdapter.h> #ifdef ESP32 #include <analogWrite.h> #endif const char *ssid = \"......\"; const char *password = \"..........\"; #if defined(LED_BUILTIN) const int lampPin = LED_BUILTIN; #else const int lampPin = 13; // manually configure LED pin #endif ThingActionObject *action_generator(DynamicJsonDocument *); WebThingAdapter *adapter; const char *lampTypes[] = {\"OnOffSwitch\", \"Light\", nullptr}; ThingDevice lamp(\"urn:dev:ops:my-lamp-1234\", \"My Lamp\", lampTypes); ThingProperty lampOn(\"on\", \"Whether the lamp is turned on\", BOOLEAN, \"OnOffProperty\"); ThingProperty lampLevel(\"brightness\", \"The level of light from 0-100\", INTEGER, \"BrightnessProperty\"); StaticJsonDocument<256> fadeInput; JsonObject fadeInputObj = fadeInput.to<JsonObject>(); ThingAction fade(\"fade\", \"Fade\", \"Fade the lamp to a given level\", \"FadeAction\", &fadeInputObj, action_generator); ThingEvent overheated(\"overheated\", \"The lamp has exceeded its safe operating temperature\", NUMBER, \"OverheatedEvent\"); bool lastOn = true; void setup(void) { pinMode(lampPin, OUTPUT); digitalWrite(lampPin, HIGH); Serial.begin(115200); Serial.println(\"\"); Serial.print(\"Connecting to \\\"\"); Serial.print(ssid); Serial.println(\"\\\"\"); #if defined(ESP8266) || defined(ESP32) WiFi.mode(WIFI_STA); #endif WiFi.begin(ssid, password); Serial.println(\"\"); // Wait for connection while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.print(\"Connected to \"); Serial.println(ssid); Serial.print(\"IP address: \"); Serial.println(WiFi.localIP()); adapter = new WebThingAdapter(\"led-lamp\", WiFi.localIP()); lamp.description = \"A web connected lamp\"; lampOn.title = \"On/Off\"; lamp.addProperty(&lampOn); lampLevel.title = \"Brightness\"; lampLevel.minimum = 0; lampLevel.maximum = 100; lampLevel.unit = \"percent\"; lamp.addProperty(&lampLevel); fadeInputObj[\"type\"] = \"object\"; JsonObject fadeInputProperties = fadeInputObj.createNestedObject(\"properties\"); JsonObject brightnessInput = fadeInputProperties.createNestedObject(\"brightness\"); brightnessInput[\"type\"] = \"integer\"; brightnessInput[\"minimum\"] = 0; brightnessInput[\"maximum\"] = 100; brightnessInput[\"unit\"] = \"percent\"; JsonObject durationInput = fadeInputProperties.createNestedObject(\"duration\"); durationInput[\"type\"] = \"integer\"; durationInput[\"minimum\"] = 1; durationInput[\"unit\"] = \"milliseconds\"; lamp.addAction(&fade); overheated.unit = \"degree celsius\"; lamp.addEvent(&overheated); adapter->addDevice(&lamp); adapter->begin(); Serial.println(\"HTTP server started\"); Serial.print(\"http://\"); Serial.print(WiFi.localIP()); Serial.print(\"/things/\"); Serial.println(lamp.id); #ifdef analogWriteRange analogWriteRange(255); #endif // set initial values ThingPropertyValue initialOn = {.boolean = true}; lampOn.setValue(initialOn); (void)lampOn.changedValueOrNull(); ThingPropertyValue initialLevel = {.integer = 50}; lampLevel.setValue(initialLevel); (void)lampLevel.changedValueOrNull(); analogWrite(lampPin, 128); randomSeed(analogRead(0)); } void loop(void) { adapter->update(); bool on = lampOn.getValue().boolean; if (on) { int level = map(lampLevel.getValue().number, 0, 100, 255, 0); analogWrite(lampPin, level); } else { analogWrite(lampPin, 255); } if (lastOn != on) { lastOn = on; } } void do_fade(const JsonVariant &input) { JsonObject inputObj = input.as<JsonObject>(); long long int duration = inputObj[\"duration\"]; long long int brightness = inputObj[\"brightness\"]; delay(duration); ThingDataValue value = {.integer = brightness}; lampLevel.setValue(value); int level = map(brightness, 0, 100, 255, 0); analogWrite(lampPin, level); ThingDataValue val; val.number = 102; ThingEventObject *ev = new ThingEventObject(\"overheated\", NUMBER, val); lamp.queueEventObject(ev); } ThingActionObject *action_generator(DynamicJsonDocument *input) { return new ThingActionObject(\"fade\", input, do_fade, nullptr); }","title":"Arduino"},{"location":"framework/arduino/#webthing-arduino","text":"","title":"webthing-arduino"},{"location":"framework/arduino/#installation","text":"","title":"Installation"},{"location":"framework/arduino/#arduino-ide","text":"Add the webthing and ArduinoJson libraries to your project.","title":"Arduino IDE"},{"location":"framework/arduino/#platformio","text":"Add the webthing-arduino and ArduinoJson libraries to your project.","title":"PlatformIO"},{"location":"framework/arduino/#example","text":"#define LARGE_JSON_BUFFERS 1 #include <Arduino.h> #include <Thing.h> #include <WebThingAdapter.h> #ifdef ESP32 #include <analogWrite.h> #endif const char *ssid = \"......\"; const char *password = \"..........\"; #if defined(LED_BUILTIN) const int lampPin = LED_BUILTIN; #else const int lampPin = 13; // manually configure LED pin #endif ThingActionObject *action_generator(DynamicJsonDocument *); WebThingAdapter *adapter; const char *lampTypes[] = {\"OnOffSwitch\", \"Light\", nullptr}; ThingDevice lamp(\"urn:dev:ops:my-lamp-1234\", \"My Lamp\", lampTypes); ThingProperty lampOn(\"on\", \"Whether the lamp is turned on\", BOOLEAN, \"OnOffProperty\"); ThingProperty lampLevel(\"brightness\", \"The level of light from 0-100\", INTEGER, \"BrightnessProperty\"); StaticJsonDocument<256> fadeInput; JsonObject fadeInputObj = fadeInput.to<JsonObject>(); ThingAction fade(\"fade\", \"Fade\", \"Fade the lamp to a given level\", \"FadeAction\", &fadeInputObj, action_generator); ThingEvent overheated(\"overheated\", \"The lamp has exceeded its safe operating temperature\", NUMBER, \"OverheatedEvent\"); bool lastOn = true; void setup(void) { pinMode(lampPin, OUTPUT); digitalWrite(lampPin, HIGH); Serial.begin(115200); Serial.println(\"\"); Serial.print(\"Connecting to \\\"\"); Serial.print(ssid); Serial.println(\"\\\"\"); #if defined(ESP8266) || defined(ESP32) WiFi.mode(WIFI_STA); #endif WiFi.begin(ssid, password); Serial.println(\"\"); // Wait for connection while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } Serial.println(\"\"); Serial.print(\"Connected to \"); Serial.println(ssid); Serial.print(\"IP address: \"); Serial.println(WiFi.localIP()); adapter = new WebThingAdapter(\"led-lamp\", WiFi.localIP()); lamp.description = \"A web connected lamp\"; lampOn.title = \"On/Off\"; lamp.addProperty(&lampOn); lampLevel.title = \"Brightness\"; lampLevel.minimum = 0; lampLevel.maximum = 100; lampLevel.unit = \"percent\"; lamp.addProperty(&lampLevel); fadeInputObj[\"type\"] = \"object\"; JsonObject fadeInputProperties = fadeInputObj.createNestedObject(\"properties\"); JsonObject brightnessInput = fadeInputProperties.createNestedObject(\"brightness\"); brightnessInput[\"type\"] = \"integer\"; brightnessInput[\"minimum\"] = 0; brightnessInput[\"maximum\"] = 100; brightnessInput[\"unit\"] = \"percent\"; JsonObject durationInput = fadeInputProperties.createNestedObject(\"duration\"); durationInput[\"type\"] = \"integer\"; durationInput[\"minimum\"] = 1; durationInput[\"unit\"] = \"milliseconds\"; lamp.addAction(&fade); overheated.unit = \"degree celsius\"; lamp.addEvent(&overheated); adapter->addDevice(&lamp); adapter->begin(); Serial.println(\"HTTP server started\"); Serial.print(\"http://\"); Serial.print(WiFi.localIP()); Serial.print(\"/things/\"); Serial.println(lamp.id); #ifdef analogWriteRange analogWriteRange(255); #endif // set initial values ThingPropertyValue initialOn = {.boolean = true}; lampOn.setValue(initialOn); (void)lampOn.changedValueOrNull(); ThingPropertyValue initialLevel = {.integer = 50}; lampLevel.setValue(initialLevel); (void)lampLevel.changedValueOrNull(); analogWrite(lampPin, 128); randomSeed(analogRead(0)); } void loop(void) { adapter->update(); bool on = lampOn.getValue().boolean; if (on) { int level = map(lampLevel.getValue().number, 0, 100, 255, 0); analogWrite(lampPin, level); } else { analogWrite(lampPin, 255); } if (lastOn != on) { lastOn = on; } } void do_fade(const JsonVariant &input) { JsonObject inputObj = input.as<JsonObject>(); long long int duration = inputObj[\"duration\"]; long long int brightness = inputObj[\"brightness\"]; delay(duration); ThingDataValue value = {.integer = brightness}; lampLevel.setValue(value); int level = map(brightness, 0, 100, 255, 0); analogWrite(lampPin, level); ThingDataValue val; val.number = 102; ThingEventObject *ev = new ThingEventObject(\"overheated\", NUMBER, val); lamp.queueEventObject(ev); } ThingActionObject *action_generator(DynamicJsonDocument *input) { return new ThingActionObject(\"fade\", input, do_fade, nullptr); }","title":"Example"},{"location":"framework/introduction/","text":"WebThings Framework Build your own web things. The WebThings Framework is a collection of re-usable software components to help developers build their own web things. This section contains installation instructions and examples showing how to create a web thing in a range of different programming languages. \ud83d\uddd2\ufe0f Note: Most of these libraries implement Mozilla's legacy Web Thing API and have not yet been updated to conform to the latest W3C WoT standards . Contributions to bring these libraries up to date are gratefully received on GitHub .","title":"Introduction"},{"location":"framework/introduction/#webthings-framework","text":"Build your own web things. The WebThings Framework is a collection of re-usable software components to help developers build their own web things. This section contains installation instructions and examples showing how to create a web thing in a range of different programming languages. \ud83d\uddd2\ufe0f Note: Most of these libraries implement Mozilla's legacy Web Thing API and have not yet been updated to conform to the latest W3C WoT standards . Contributions to bring these libraries up to date are gratefully received on GitHub .","title":"WebThings Framework"},{"location":"framework/java/","text":"webthing-java Installation Maven <dependencies> <dependency> <groupId>io.webthings</groupId> <artifactId>webthing</artifactId> <version>0.13.0</version> </dependency> </dependencies> Gradle dependencies { runtime( [group: 'io.webthings', name: 'webthing', version: '0.13.0'], ) } Example package io.webthings.webthing.example; import org.json.JSONArray; import org.json.JSONObject; import io.webthings.webthing.Action; import io.webthings.webthing.Event; import io.webthings.webthing.Property; import io.webthings.webthing.Thing; import io.webthings.webthing.Value; import io.webthings.webthing.WebThingServer; import io.webthings.webthing.errors.PropertyError; import java.io.IOException; import java.util.Arrays; import java.util.UUID; public class SingleThing { public static Thing makeThing() { Thing thing = new Thing(\"urn:dev:ops:my-lamp-1234\", \"My Lamp\", new JSONArray(Arrays.asList(\"OnOffSwitch\", \"Light\")), \"A web connected lamp\"); JSONObject onDescription = new JSONObject(); onDescription.put(\"@type\", \"OnOffProperty\"); onDescription.put(\"title\", \"On/Off\"); onDescription.put(\"type\", \"boolean\"); onDescription.put(\"description\", \"Whether the lamp is turned on\"); thing.addProperty(new Property(thing, \"on\", new Value(true), onDescription)); JSONObject brightnessDescription = new JSONObject(); brightnessDescription.put(\"@type\", \"BrightnessProperty\"); brightnessDescription.put(\"title\", \"Brightness\"); brightnessDescription.put(\"type\", \"integer\"); brightnessDescription.put(\"description\", \"The level of light from 0-100\"); brightnessDescription.put(\"minimum\", 0); brightnessDescription.put(\"maximum\", 100); brightnessDescription.put(\"unit\", \"percent\"); thing.addProperty(new Property(thing, \"brightness\", new Value(50), brightnessDescription)); JSONObject fadeMetadata = new JSONObject(); JSONObject fadeInput = new JSONObject(); JSONObject fadeProperties = new JSONObject(); JSONObject fadeBrightness = new JSONObject(); JSONObject fadeDuration = new JSONObject(); fadeMetadata.put(\"title\", \"Fade\"); fadeMetadata.put(\"description\", \"Fade the lamp to a given level\"); fadeInput.put(\"type\", \"object\"); fadeInput.put(\"required\", new JSONArray(Arrays.asList(\"brightness\", \"duration\"))); fadeBrightness.put(\"type\", \"integer\"); fadeBrightness.put(\"minimum\", 0); fadeBrightness.put(\"maximum\", 100); fadeBrightness.put(\"unit\", \"percent\"); fadeDuration.put(\"type\", \"integer\"); fadeDuration.put(\"minimum\", 1); fadeDuration.put(\"unit\", \"milliseconds\"); fadeProperties.put(\"brightness\", fadeBrightness); fadeProperties.put(\"duration\", fadeDuration); fadeInput.put(\"properties\", fadeProperties); fadeMetadata.put(\"input\", fadeInput); thing.addAvailableAction(\"fade\", fadeMetadata, FadeAction.class); JSONObject overheatedMetadata = new JSONObject(); overheatedMetadata.put(\"description\", \"The lamp has exceeded its safe operating temperature\"); overheatedMetadata.put(\"type\", \"number\"); overheatedMetadata.put(\"unit\", \"degree celsius\"); thing.addAvailableEvent(\"overheated\", overheatedMetadata); return thing; } public static void main(String[] args) { Thing thing = makeThing(); WebThingServer server; try { // If adding more than one thing, use MultipleThings() with a name. // In the single thing case, the thing's name will be broadcast. server = new WebThingServer(new WebThingServer.SingleThing(thing), 8888); Runtime.getRuntime().addShutdownHook(new Thread() { public void run() { server.stop(); } }); server.start(false); } catch (IOException e) { System.out.println(e); System.exit(1); } } public static class OverheatedEvent extends Event { public OverheatedEvent(Thing thing, int data) { super(thing, \"overheated\", data); } } public static class FadeAction extends Action { public FadeAction(Thing thing, JSONObject input) { super(UUID.randomUUID().toString(), thing, \"fade\", input); } @Override public void performAction() { Thing thing = this.getThing(); JSONObject input = this.getInput(); try { Thread.sleep(input.getInt(\"duration\")); } catch (InterruptedException e) { } try { thing.setProperty(\"brightness\", input.getInt(\"brightness\")); thing.addEvent(new OverheatedEvent(thing, 102)); } catch (PropertyError e) { } } } }","title":"Java"},{"location":"framework/java/#webthing-java","text":"","title":"webthing-java"},{"location":"framework/java/#installation","text":"","title":"Installation"},{"location":"framework/java/#maven","text":"<dependencies> <dependency> <groupId>io.webthings</groupId> <artifactId>webthing</artifactId> <version>0.13.0</version> </dependency> </dependencies>","title":"Maven"},{"location":"framework/java/#gradle","text":"dependencies { runtime( [group: 'io.webthings', name: 'webthing', version: '0.13.0'], ) }","title":"Gradle"},{"location":"framework/java/#example","text":"package io.webthings.webthing.example; import org.json.JSONArray; import org.json.JSONObject; import io.webthings.webthing.Action; import io.webthings.webthing.Event; import io.webthings.webthing.Property; import io.webthings.webthing.Thing; import io.webthings.webthing.Value; import io.webthings.webthing.WebThingServer; import io.webthings.webthing.errors.PropertyError; import java.io.IOException; import java.util.Arrays; import java.util.UUID; public class SingleThing { public static Thing makeThing() { Thing thing = new Thing(\"urn:dev:ops:my-lamp-1234\", \"My Lamp\", new JSONArray(Arrays.asList(\"OnOffSwitch\", \"Light\")), \"A web connected lamp\"); JSONObject onDescription = new JSONObject(); onDescription.put(\"@type\", \"OnOffProperty\"); onDescription.put(\"title\", \"On/Off\"); onDescription.put(\"type\", \"boolean\"); onDescription.put(\"description\", \"Whether the lamp is turned on\"); thing.addProperty(new Property(thing, \"on\", new Value(true), onDescription)); JSONObject brightnessDescription = new JSONObject(); brightnessDescription.put(\"@type\", \"BrightnessProperty\"); brightnessDescription.put(\"title\", \"Brightness\"); brightnessDescription.put(\"type\", \"integer\"); brightnessDescription.put(\"description\", \"The level of light from 0-100\"); brightnessDescription.put(\"minimum\", 0); brightnessDescription.put(\"maximum\", 100); brightnessDescription.put(\"unit\", \"percent\"); thing.addProperty(new Property(thing, \"brightness\", new Value(50), brightnessDescription)); JSONObject fadeMetadata = new JSONObject(); JSONObject fadeInput = new JSONObject(); JSONObject fadeProperties = new JSONObject(); JSONObject fadeBrightness = new JSONObject(); JSONObject fadeDuration = new JSONObject(); fadeMetadata.put(\"title\", \"Fade\"); fadeMetadata.put(\"description\", \"Fade the lamp to a given level\"); fadeInput.put(\"type\", \"object\"); fadeInput.put(\"required\", new JSONArray(Arrays.asList(\"brightness\", \"duration\"))); fadeBrightness.put(\"type\", \"integer\"); fadeBrightness.put(\"minimum\", 0); fadeBrightness.put(\"maximum\", 100); fadeBrightness.put(\"unit\", \"percent\"); fadeDuration.put(\"type\", \"integer\"); fadeDuration.put(\"minimum\", 1); fadeDuration.put(\"unit\", \"milliseconds\"); fadeProperties.put(\"brightness\", fadeBrightness); fadeProperties.put(\"duration\", fadeDuration); fadeInput.put(\"properties\", fadeProperties); fadeMetadata.put(\"input\", fadeInput); thing.addAvailableAction(\"fade\", fadeMetadata, FadeAction.class); JSONObject overheatedMetadata = new JSONObject(); overheatedMetadata.put(\"description\", \"The lamp has exceeded its safe operating temperature\"); overheatedMetadata.put(\"type\", \"number\"); overheatedMetadata.put(\"unit\", \"degree celsius\"); thing.addAvailableEvent(\"overheated\", overheatedMetadata); return thing; } public static void main(String[] args) { Thing thing = makeThing(); WebThingServer server; try { // If adding more than one thing, use MultipleThings() with a name. // In the single thing case, the thing's name will be broadcast. server = new WebThingServer(new WebThingServer.SingleThing(thing), 8888); Runtime.getRuntime().addShutdownHook(new Thread() { public void run() { server.stop(); } }); server.start(false); } catch (IOException e) { System.out.println(e); System.exit(1); } } public static class OverheatedEvent extends Event { public OverheatedEvent(Thing thing, int data) { super(thing, \"overheated\", data); } } public static class FadeAction extends Action { public FadeAction(Thing thing, JSONObject input) { super(UUID.randomUUID().toString(), thing, \"fade\", input); } @Override public void performAction() { Thing thing = this.getThing(); JSONObject input = this.getInput(); try { Thread.sleep(input.getInt(\"duration\")); } catch (InterruptedException e) { } try { thing.setProperty(\"brightness\", input.getInt(\"brightness\")); thing.addEvent(new OverheatedEvent(thing, 102)); } catch (PropertyError e) { } } } }","title":"Example"},{"location":"framework/micropython/","text":"webthing-upy See README on GitHub.","title":"MicroPython"},{"location":"framework/micropython/#webthing-upy","text":"See README on GitHub.","title":"webthing-upy"},{"location":"framework/node-js/","text":"webthing-node Installation $ npm install webthing Example const { Action, Event, Property, SingleThing, Thing, Value, WebThingServer, } = require('webthing'); const uuidv4 = require('uuid/v4'); class OverheatedEvent extends Event { constructor(thing, data) { super(thing, 'overheated', data); } } class FadeAction extends Action { constructor(thing, input) { super(uuidv4(), thing, 'fade', input); } performAction() { return new Promise((resolve) = & gt; { setTimeout(() = & gt; { this.thing.setProperty('brightness', this.input.brightness); this.thing.addEvent(new OverheatedEvent(this.thing, 102)); resolve(); }, this.input.duration); }); } } function makeThing() { const thing = new Thing('urn:dev:ops:my-lamp-1234', 'My Lamp', ['OnOffSwitch', 'Light'], 'A web connected lamp'); thing.addProperty( new Property(thing, 'on', new Value(true), { '@type': 'OnOffProperty', title: 'On/Off', type: 'boolean', description: 'Whether the lamp is turned on', })); thing.addProperty( new Property(thing, 'brightness', new Value(50), { '@type': 'BrightnessProperty', title: 'Brightness', type: 'integer', description: 'The level of light from 0-100', minimum: 0, maximum: 100, unit: 'percent', })); thing.addAvailableAction( 'fade', { title: 'Fade', description: 'Fade the lamp to a given level', input: { type: 'object', required: [ 'brightness', 'duration', ], properties: { brightness: { type: 'integer', minimum: 0, maximum: 100, unit: 'percent', }, duration: { type: 'integer', minimum: 1, unit: 'milliseconds', }, }, }, }, FadeAction); thing.addAvailableEvent( 'overheated', { description: 'The lamp has exceeded its safe operating temperature', type: 'number', unit: 'degree celsius', }); return thing; } function runServer() { const thing = makeThing(); // If adding more than one thing, use MultipleThings() with a name. // In the single thing case, the thing's name will be broadcast. const server = new WebThingServer(new SingleThing(thing), 8888); process.on('SIGINT', () = & gt; { server.stop().then(() = & gt; process.exit()).catch(() = & gt; process.exit()); }); server.start().catch(console.error); } runServer();","title":"Node.js"},{"location":"framework/node-js/#webthing-node","text":"","title":"webthing-node"},{"location":"framework/node-js/#installation","text":"$ npm install webthing","title":"Installation"},{"location":"framework/node-js/#example","text":"const { Action, Event, Property, SingleThing, Thing, Value, WebThingServer, } = require('webthing'); const uuidv4 = require('uuid/v4'); class OverheatedEvent extends Event { constructor(thing, data) { super(thing, 'overheated', data); } } class FadeAction extends Action { constructor(thing, input) { super(uuidv4(), thing, 'fade', input); } performAction() { return new Promise((resolve) = & gt; { setTimeout(() = & gt; { this.thing.setProperty('brightness', this.input.brightness); this.thing.addEvent(new OverheatedEvent(this.thing, 102)); resolve(); }, this.input.duration); }); } } function makeThing() { const thing = new Thing('urn:dev:ops:my-lamp-1234', 'My Lamp', ['OnOffSwitch', 'Light'], 'A web connected lamp'); thing.addProperty( new Property(thing, 'on', new Value(true), { '@type': 'OnOffProperty', title: 'On/Off', type: 'boolean', description: 'Whether the lamp is turned on', })); thing.addProperty( new Property(thing, 'brightness', new Value(50), { '@type': 'BrightnessProperty', title: 'Brightness', type: 'integer', description: 'The level of light from 0-100', minimum: 0, maximum: 100, unit: 'percent', })); thing.addAvailableAction( 'fade', { title: 'Fade', description: 'Fade the lamp to a given level', input: { type: 'object', required: [ 'brightness', 'duration', ], properties: { brightness: { type: 'integer', minimum: 0, maximum: 100, unit: 'percent', }, duration: { type: 'integer', minimum: 1, unit: 'milliseconds', }, }, }, }, FadeAction); thing.addAvailableEvent( 'overheated', { description: 'The lamp has exceeded its safe operating temperature', type: 'number', unit: 'degree celsius', }); return thing; } function runServer() { const thing = makeThing(); // If adding more than one thing, use MultipleThings() with a name. // In the single thing case, the thing's name will be broadcast. const server = new WebThingServer(new SingleThing(thing), 8888); process.on('SIGINT', () = & gt; { server.stop().then(() = & gt; process.exit()).catch(() = & gt; process.exit()); }); server.start().catch(console.error); } runServer();","title":"Example"},{"location":"framework/python/","text":"webthing-python Installation $ pip install webthing Example from __future__ import division from webthing import (Action, Event, Property, SingleThing, Thing, Value, WebThingServer) import logging import time import uuid class OverheatedEvent(Event): def __init__(self, thing, data): Event.__init__(self, thing, 'overheated', data=data) class FadeAction(Action): def __init__(self, thing, input_): Action.__init__(self, uuid.uuid4().hex, thing, 'fade', input_=input_) def perform_action(self): time.sleep(self.input['duration'] / 1000) self.thing.set_property('brightness', self.input['brightness']) self.thing.add_event(OverheatedEvent(self.thing, 102)) def make_thing(): thing = Thing( 'urn:dev:ops:my-lamp-1234', 'My Lamp', ['OnOffSwitch', 'Light'], 'A web connected lamp' ) thing.add_property( Property(thing, 'on', Value(True), metadata={ '@type': 'OnOffProperty', 'title': 'On/Off', 'type': 'boolean', 'description': 'Whether the lamp is turned on', })) thing.add_property( Property(thing, 'brightness', Value(50), metadata={ '@type': 'BrightnessProperty', 'title': 'Brightness', 'type': 'integer', 'description': 'The level of light from 0-100', 'minimum': 0, 'maximum': 100, 'unit': 'percent', })) thing.add_available_action( 'fade', { 'title': 'Fade', 'description': 'Fade the lamp to a given level', 'input': { 'type': 'object', 'required': [ 'brightness', 'duration', ], 'properties': { 'brightness': { 'type': 'integer', 'minimum': 0, 'maximum': 100, 'unit': 'percent', }, 'duration': { 'type': 'integer', 'minimum': 1, 'unit': 'milliseconds', }, }, }, }, FadeAction) thing.add_available_event( 'overheated', { 'description': 'The lamp has exceeded its safe operating temperature', 'type': 'number', 'unit': 'degree celsius', }) return thing def run_server(): thing = make_thing() # If adding more than one thing, use MultipleThings() with a name. # In the single thing case, the thing's name will be broadcast. server = WebThingServer(SingleThing(thing), port=8888) try: logging.info('starting the server') server.start() except KeyboardInterrupt: logging.info('stopping the server') server.stop() logging.info('done') if __name__ == '__main__': logging.basicConfig( level=10, format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s %(message)s\" ) run_server()","title":"Python"},{"location":"framework/python/#webthing-python","text":"","title":"webthing-python"},{"location":"framework/python/#installation","text":"$ pip install webthing","title":"Installation"},{"location":"framework/python/#example","text":"from __future__ import division from webthing import (Action, Event, Property, SingleThing, Thing, Value, WebThingServer) import logging import time import uuid class OverheatedEvent(Event): def __init__(self, thing, data): Event.__init__(self, thing, 'overheated', data=data) class FadeAction(Action): def __init__(self, thing, input_): Action.__init__(self, uuid.uuid4().hex, thing, 'fade', input_=input_) def perform_action(self): time.sleep(self.input['duration'] / 1000) self.thing.set_property('brightness', self.input['brightness']) self.thing.add_event(OverheatedEvent(self.thing, 102)) def make_thing(): thing = Thing( 'urn:dev:ops:my-lamp-1234', 'My Lamp', ['OnOffSwitch', 'Light'], 'A web connected lamp' ) thing.add_property( Property(thing, 'on', Value(True), metadata={ '@type': 'OnOffProperty', 'title': 'On/Off', 'type': 'boolean', 'description': 'Whether the lamp is turned on', })) thing.add_property( Property(thing, 'brightness', Value(50), metadata={ '@type': 'BrightnessProperty', 'title': 'Brightness', 'type': 'integer', 'description': 'The level of light from 0-100', 'minimum': 0, 'maximum': 100, 'unit': 'percent', })) thing.add_available_action( 'fade', { 'title': 'Fade', 'description': 'Fade the lamp to a given level', 'input': { 'type': 'object', 'required': [ 'brightness', 'duration', ], 'properties': { 'brightness': { 'type': 'integer', 'minimum': 0, 'maximum': 100, 'unit': 'percent', }, 'duration': { 'type': 'integer', 'minimum': 1, 'unit': 'milliseconds', }, }, }, }, FadeAction) thing.add_available_event( 'overheated', { 'description': 'The lamp has exceeded its safe operating temperature', 'type': 'number', 'unit': 'degree celsius', }) return thing def run_server(): thing = make_thing() # If adding more than one thing, use MultipleThings() with a name. # In the single thing case, the thing's name will be broadcast. server = WebThingServer(SingleThing(thing), port=8888) try: logging.info('starting the server') server.start() except KeyboardInterrupt: logging.info('stopping the server') server.stop() logging.info('done') if __name__ == '__main__': logging.basicConfig( level=10, format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s %(message)s\" ) run_server()","title":"Example"},{"location":"framework/rust/","text":"webthing-rust Installation Cargo [dependencies] webthing = \"0.13\" Example use actix_rt; use serde_json::json; use std::sync::{Arc, RwLock, Weak}; use std::{thread, time}; use uuid::Uuid; use webthing::{ Action, BaseAction, BaseEvent, BaseProperty, BaseThing, Thing, ThingsType, WebThingServer, }; use webthing::server::ActionGenerator; pub struct FadeAction(BaseAction); impl FadeAction { fn new( input: Option<serde_json::Map<String, serde_json::Value>>, thing: Weak<RwLock<Box<dyn Thing>>>, ) -> FadeAction { FadeAction(BaseAction::new( Uuid::new_v4().to_string(), \"fade\".to_owned(), input, thing, )) } } impl Action for FadeAction { fn set_href_prefix(&mut self, prefix: String) { self.0.set_href_prefix(prefix) } fn get_id(&self) -> String { self.0.get_id() } fn get_name(&self) -> String { self.0.get_name() } fn get_href(&self) -> String { self.0.get_href() } fn get_status(&self) -> String { self.0.get_status() } fn get_time_requested(&self) -> String { self.0.get_time_requested() } fn get_time_completed(&self) -> Option<String> { self.0.get_time_completed() } fn get_input(&self) -> Option<serde_json::Map<String, serde_json::Value>> { self.0.get_input() } fn get_thing(&self) -> Option<Arc<RwLock<Box<dyn Thing>>>> { self.0.get_thing() } fn set_status(&mut self, status: String) { self.0.set_status(status) } fn start(&mut self) { self.0.start() } fn perform_action(&mut self) { let thing = self.get_thing(); if thing.is_none() { return; } let thing = thing.unwrap(); let input = self.get_input().unwrap().clone(); let name = self.get_name(); let id = self.get_id(); thread::spawn(move || { thread::sleep(time::Duration::from_millis( input.get(\"duration\").unwrap().as_u64().unwrap(), )); let thing = thing.clone(); let mut thing = thing.write().unwrap(); let _ = thing.set_property( \"brightness\".to_owned(), input.get(\"brightness\").unwrap().clone(), ); thing.add_event(Box::new(BaseEvent::new( \"overheated\".to_owned(), Some(json!(102)), ))); thing.finish_action(name, id); }); } fn cancel(&mut self) { self.0.cancel() } fn finish(&mut self) { self.0.finish() } } struct Generator; impl ActionGenerator for Generator { fn generate( &self, thing: Weak<RwLock<Box<dyn Thing>>>, name: String, input: Option<&serde_json::Value>, ) -> Option<Box<dyn Action>> { let input = match input { Some(v) => match v.as_object() { Some(o) => Some(o.clone()), None => None, }, None => None, }; let name: &str = &name; match name { \"fade\" => Some(Box::new(FadeAction::new(input, thing))), _ => None, } } } fn make_thing() -> Arc<RwLock<Box<dyn Thing + 'static>>> { let mut thing = BaseThing::new( \"urn:dev:ops:my-lamp-1234\".to_owned(), \"My Lamp\".to_owned(), Some(vec![\"OnOffSwitch\".to_owned(), \"Light\".to_owned()]), Some(\"A web connected lamp\".to_owned()), ); let on_description = json!({ \"@type\": \"OnOffProperty\", \"title\": \"On/Off\", \"type\": \"boolean\", \"description\": \"Whether the lamp is turned on\" }); let on_description = on_description.as_object().unwrap().clone(); thing.add_property(Box::new(BaseProperty::new( \"on\".to_owned(), json!(true), None, Some(on_description), ))); let brightness_description = json!({ \"@type\": \"BrightnessProperty\", \"title\": \"Brightness\", \"type\": \"integer\", \"description\": \"The level of light from 0-100\", \"minimum\": 0, \"maximum\": 100, \"unit\": \"percent\" }); let brightness_description = brightness_description.as_object().unwrap().clone(); thing.add_property(Box::new(BaseProperty::new( \"brightness\".to_owned(), json!(50), None, Some(brightness_description), ))); let fade_metadata = json!({ \"title\": \"Fade\", \"description\": \"Fade the lamp to a given level\", \"input\": { \"type\": \"object\", \"required\": [ \"brightness\", \"duration\" ], \"properties\": { \"brightness\": { \"type\": \"integer\", \"minimum\": 0, \"maximum\": 100, \"unit\": \"percent\" }, \"duration\": { \"type\": \"integer\", \"minimum\": 1, \"unit\": \"milliseconds\" } } } }); let fade_metadata = fade_metadata.as_object().unwrap().clone(); thing.add_available_action(\"fade\".to_owned(), fade_metadata); let overheated_metadata = json!({ \"description\": \"The lamp has exceeded its safe operating temperature\", \"type\": \"number\", \"unit\": \"degree celsius\" }); let overheated_metadata = overheated_metadata.as_object().unwrap().clone(); thing.add_available_event(\"overheated\".to_owned(), overheated_metadata); Arc::new(RwLock::new(Box::new(thing))) } #[actix_rt::main] async fn main() -> std::io::Result<()> { env_logger::init(); let thing = make_thing(); // If adding more than one thing, use ThingsType::Multiple() with a name. // In the single thing case, the thing's name will be broadcast. let mut server = WebThingServer::new( ThingsType::Single(thing), Some(8888), None, None, Box::new(Generator), None, ); server.start(None).await }","title":"Rust"},{"location":"framework/rust/#webthing-rust","text":"","title":"webthing-rust"},{"location":"framework/rust/#installation","text":"","title":"Installation"},{"location":"framework/rust/#cargo","text":"[dependencies] webthing = \"0.13\"","title":"Cargo"},{"location":"framework/rust/#example","text":"use actix_rt; use serde_json::json; use std::sync::{Arc, RwLock, Weak}; use std::{thread, time}; use uuid::Uuid; use webthing::{ Action, BaseAction, BaseEvent, BaseProperty, BaseThing, Thing, ThingsType, WebThingServer, }; use webthing::server::ActionGenerator; pub struct FadeAction(BaseAction); impl FadeAction { fn new( input: Option<serde_json::Map<String, serde_json::Value>>, thing: Weak<RwLock<Box<dyn Thing>>>, ) -> FadeAction { FadeAction(BaseAction::new( Uuid::new_v4().to_string(), \"fade\".to_owned(), input, thing, )) } } impl Action for FadeAction { fn set_href_prefix(&mut self, prefix: String) { self.0.set_href_prefix(prefix) } fn get_id(&self) -> String { self.0.get_id() } fn get_name(&self) -> String { self.0.get_name() } fn get_href(&self) -> String { self.0.get_href() } fn get_status(&self) -> String { self.0.get_status() } fn get_time_requested(&self) -> String { self.0.get_time_requested() } fn get_time_completed(&self) -> Option<String> { self.0.get_time_completed() } fn get_input(&self) -> Option<serde_json::Map<String, serde_json::Value>> { self.0.get_input() } fn get_thing(&self) -> Option<Arc<RwLock<Box<dyn Thing>>>> { self.0.get_thing() } fn set_status(&mut self, status: String) { self.0.set_status(status) } fn start(&mut self) { self.0.start() } fn perform_action(&mut self) { let thing = self.get_thing(); if thing.is_none() { return; } let thing = thing.unwrap(); let input = self.get_input().unwrap().clone(); let name = self.get_name(); let id = self.get_id(); thread::spawn(move || { thread::sleep(time::Duration::from_millis( input.get(\"duration\").unwrap().as_u64().unwrap(), )); let thing = thing.clone(); let mut thing = thing.write().unwrap(); let _ = thing.set_property( \"brightness\".to_owned(), input.get(\"brightness\").unwrap().clone(), ); thing.add_event(Box::new(BaseEvent::new( \"overheated\".to_owned(), Some(json!(102)), ))); thing.finish_action(name, id); }); } fn cancel(&mut self) { self.0.cancel() } fn finish(&mut self) { self.0.finish() } } struct Generator; impl ActionGenerator for Generator { fn generate( &self, thing: Weak<RwLock<Box<dyn Thing>>>, name: String, input: Option<&serde_json::Value>, ) -> Option<Box<dyn Action>> { let input = match input { Some(v) => match v.as_object() { Some(o) => Some(o.clone()), None => None, }, None => None, }; let name: &str = &name; match name { \"fade\" => Some(Box::new(FadeAction::new(input, thing))), _ => None, } } } fn make_thing() -> Arc<RwLock<Box<dyn Thing + 'static>>> { let mut thing = BaseThing::new( \"urn:dev:ops:my-lamp-1234\".to_owned(), \"My Lamp\".to_owned(), Some(vec![\"OnOffSwitch\".to_owned(), \"Light\".to_owned()]), Some(\"A web connected lamp\".to_owned()), ); let on_description = json!({ \"@type\": \"OnOffProperty\", \"title\": \"On/Off\", \"type\": \"boolean\", \"description\": \"Whether the lamp is turned on\" }); let on_description = on_description.as_object().unwrap().clone(); thing.add_property(Box::new(BaseProperty::new( \"on\".to_owned(), json!(true), None, Some(on_description), ))); let brightness_description = json!({ \"@type\": \"BrightnessProperty\", \"title\": \"Brightness\", \"type\": \"integer\", \"description\": \"The level of light from 0-100\", \"minimum\": 0, \"maximum\": 100, \"unit\": \"percent\" }); let brightness_description = brightness_description.as_object().unwrap().clone(); thing.add_property(Box::new(BaseProperty::new( \"brightness\".to_owned(), json!(50), None, Some(brightness_description), ))); let fade_metadata = json!({ \"title\": \"Fade\", \"description\": \"Fade the lamp to a given level\", \"input\": { \"type\": \"object\", \"required\": [ \"brightness\", \"duration\" ], \"properties\": { \"brightness\": { \"type\": \"integer\", \"minimum\": 0, \"maximum\": 100, \"unit\": \"percent\" }, \"duration\": { \"type\": \"integer\", \"minimum\": 1, \"unit\": \"milliseconds\" } } } }); let fade_metadata = fade_metadata.as_object().unwrap().clone(); thing.add_available_action(\"fade\".to_owned(), fade_metadata); let overheated_metadata = json!({ \"description\": \"The lamp has exceeded its safe operating temperature\", \"type\": \"number\", \"unit\": \"degree celsius\" }); let overheated_metadata = overheated_metadata.as_object().unwrap().clone(); thing.add_available_event(\"overheated\".to_owned(), overheated_metadata); Arc::new(RwLock::new(Box::new(thing))) } #[actix_rt::main] async fn main() -> std::io::Result<()> { env_logger::init(); let thing = make_thing(); // If adding more than one thing, use ThingsType::Multiple() with a name. // In the single thing case, the thing's name will be broadcast. let mut server = WebThingServer::new( ThingsType::Single(thing), Some(8888), None, None, Box::new(Generator), None, ); server.start(None).await }","title":"Example"},{"location":"gateway/floorplan/","text":"Floorplan The floorplan view enables you to lay out your things on an interactive floorplan of your home. To navigate to the floorplan view, select the \"Floorplan\" option in the main menu. Upload Floorplan The first time you view the floorplan view you will see all your things un-arranged in a row at the top of the screen. To upload a floorplan of your home, first click on the \"\u270e\" button at the bottom right of the screen to enter the edit floorplan view. From the edit floorplan view, click the \"Upload floorplan...\" button to upload a floorplan image of your home. \ud83d\udca1 Tip: You can upload any image file that can be rendered by web browsers including scanned images or even a photograph. For best results we recommend an SVG file with white lines and a transparent background. Once you have uploaded your image, click the \"\u2714\" button at the bottom right of the screen to exit the edit view. Re-arrange Things To arrange your things on the floorplan, first click the \"\u270e\" button at the bottom right of the screen. You can then drag and drop the things into position on the floorplan. Once you have finished re-arranging things, click the \"\u2714\" button at the bottom right of the screen to exit the edit view. Monitor & Control Things The thing icons in the floorplan view show a live overview of their current state. You can toggle things on and off from the floorplan view by clicking them. To navigate to the detail view for a particular thing, long press its thing icon.","title":"Floorplan"},{"location":"gateway/floorplan/#floorplan","text":"The floorplan view enables you to lay out your things on an interactive floorplan of your home. To navigate to the floorplan view, select the \"Floorplan\" option in the main menu.","title":"Floorplan"},{"location":"gateway/floorplan/#upload-floorplan","text":"The first time you view the floorplan view you will see all your things un-arranged in a row at the top of the screen. To upload a floorplan of your home, first click on the \"\u270e\" button at the bottom right of the screen to enter the edit floorplan view. From the edit floorplan view, click the \"Upload floorplan...\" button to upload a floorplan image of your home. \ud83d\udca1 Tip: You can upload any image file that can be rendered by web browsers including scanned images or even a photograph. For best results we recommend an SVG file with white lines and a transparent background. Once you have uploaded your image, click the \"\u2714\" button at the bottom right of the screen to exit the edit view.","title":"Upload Floorplan"},{"location":"gateway/floorplan/#re-arrange-things","text":"To arrange your things on the floorplan, first click the \"\u270e\" button at the bottom right of the screen. You can then drag and drop the things into position on the floorplan. Once you have finished re-arranging things, click the \"\u2714\" button at the bottom right of the screen to exit the edit view.","title":"Re-arrange Things"},{"location":"gateway/floorplan/#monitor-control-things","text":"The thing icons in the floorplan view show a live overview of their current state. You can toggle things on and off from the floorplan view by clicking them. To navigate to the detail view for a particular thing, long press its thing icon.","title":"Monitor &amp; Control Things"},{"location":"gateway/hacking/","text":"Development WebThings Gateway is an open source project maintained by a community of volunteers. To get started hacking on the gateway, see the README and wiki . The API exposed by the gateway is called the Web Thing API . We are currently in the process of migrating this API to conform with W3C Web of Things standards. You can see an overview of differences between the two here . Add-on Development WebThings Gateway has a directory of community-contributed add-ons which enhance its capabilities. To learn how to develop your own add-on or contribute to an existing one, you may want to start with the resources below: Introduction to Add-ons Creating an Add-on Configuring an Add-on Publishing an Add-on Examples: Adapter Add-on Notifier Add-on Extension Add-on Add-on APIs Node.js Add-on API Python Add-on API Adapter Inter-process communication Debug Controller","title":"Development"},{"location":"gateway/hacking/#development","text":"WebThings Gateway is an open source project maintained by a community of volunteers. To get started hacking on the gateway, see the README and wiki . The API exposed by the gateway is called the Web Thing API . We are currently in the process of migrating this API to conform with W3C Web of Things standards. You can see an overview of differences between the two here .","title":"Development"},{"location":"gateway/hacking/#add-on-development","text":"WebThings Gateway has a directory of community-contributed add-ons which enhance its capabilities. To learn how to develop your own add-on or contribute to an existing one, you may want to start with the resources below: Introduction to Add-ons Creating an Add-on Configuring an Add-on Publishing an Add-on Examples: Adapter Add-on Notifier Add-on Extension Add-on Add-on APIs Node.js Add-on API Python Add-on API Adapter Inter-process communication Debug Controller","title":"Add-on Development"},{"location":"gateway/installation/","text":"Installation The recommended ways to install WebThings Gateway are to either use a pre-built OS image for a Raspberry Pi , or install the Docker image. Alternatively you can build it from the source code yourself. Raspberry Pi To install WebThings Gateway on a Raspberry Pi you will need: A Raspberry Pi\u00ae single board computer (Raspberry Pi 3 or 4 recommended) and power supply A microSD card (At least 8GB, class 10 recommended) USB dongles (Optional, see the list of supported hardware ) \ud83d\uddd2\ufe0f Note: The Raspberry Pi 3 comes with Wi-Fi and Bluetooth radios. The USB dongles are needed if you want to support other smart home protocols like Zigbee and Z-Wave. 1. Download Image First download the latest gateway image from the WebThings website . 2. Flash Image Next you will need to flash the downloaded image onto your microSD card. There are various methods of doing this but we recommend using Etcher . Open Etcher Insert your SD card into an SD card reader attached to your computer Select the downloaded image as the source file Select your SD card as the target Click \"Flash!\" Once flashing is complete, remove the microSD card. 3. Boot Raspberry Pi Insert the flashed microSD card into your Raspberry Pi Plug in any USB dongles Connect the power supply to boot the Pi Check that the LEDs light up: red indicates power, green indicates activity Wait a few minutes for the software to boot \ud83d\uddd2\ufe0f Note: On first boot the Raspberry Pi may take an additional 2-3 minutes longer to boot in order to take care of some first time setup. Docker To install WebThings Gateway on Docker, follow the instructions on Docker Hub .","title":"Installation"},{"location":"gateway/installation/#installation","text":"The recommended ways to install WebThings Gateway are to either use a pre-built OS image for a Raspberry Pi , or install the Docker image. Alternatively you can build it from the source code yourself.","title":"Installation"},{"location":"gateway/installation/#raspberry-pi","text":"To install WebThings Gateway on a Raspberry Pi you will need: A Raspberry Pi\u00ae single board computer (Raspberry Pi 3 or 4 recommended) and power supply A microSD card (At least 8GB, class 10 recommended) USB dongles (Optional, see the list of supported hardware ) \ud83d\uddd2\ufe0f Note: The Raspberry Pi 3 comes with Wi-Fi and Bluetooth radios. The USB dongles are needed if you want to support other smart home protocols like Zigbee and Z-Wave.","title":"Raspberry Pi"},{"location":"gateway/installation/#1-download-image","text":"First download the latest gateway image from the WebThings website .","title":"1. Download Image"},{"location":"gateway/installation/#2-flash-image","text":"Next you will need to flash the downloaded image onto your microSD card. There are various methods of doing this but we recommend using Etcher . Open Etcher Insert your SD card into an SD card reader attached to your computer Select the downloaded image as the source file Select your SD card as the target Click \"Flash!\" Once flashing is complete, remove the microSD card.","title":"2. Flash Image"},{"location":"gateway/installation/#3-boot-raspberry-pi","text":"Insert the flashed microSD card into your Raspberry Pi Plug in any USB dongles Connect the power supply to boot the Pi Check that the LEDs light up: red indicates power, green indicates activity Wait a few minutes for the software to boot \ud83d\uddd2\ufe0f Note: On first boot the Raspberry Pi may take an additional 2-3 minutes longer to boot in order to take care of some first time setup.","title":"3. Boot Raspberry Pi"},{"location":"gateway/installation/#docker","text":"To install WebThings Gateway on Docker, follow the instructions on Docker Hub .","title":"Docker"},{"location":"gateway/introduction/","text":"WebThings Gateway Host your own private smart home. WebThings Gateway is a software distribution for smart home hubs focused on privacy, security and interoperability. It enables you to securely monitor and control your home over the web, without a middleman. Features include: Monitor and control all of your smart home devices from a unified web interface Create \"if this then that\" style rules to automate your home with a simple drag and drop interface Log and visualise sensor data over time Lay out all your devices on an interactive floorplan of your home for at-a-glance status and control Add compatibility with more devices and protocols with adapter add-ons . The gateway bridges a range of different smart home protocols to a standardised Web of Things API.","title":"Introduction"},{"location":"gateway/introduction/#webthings-gateway","text":"Host your own private smart home. WebThings Gateway is a software distribution for smart home hubs focused on privacy, security and interoperability. It enables you to securely monitor and control your home over the web, without a middleman. Features include: Monitor and control all of your smart home devices from a unified web interface Create \"if this then that\" style rules to automate your home with a simple drag and drop interface Log and visualise sensor data over time Lay out all your devices on an interactive floorplan of your home for at-a-glance status and control Add compatibility with more devices and protocols with adapter add-ons . The gateway bridges a range of different smart home protocols to a standardised Web of Things API.","title":"WebThings Gateway"},{"location":"gateway/log-in/","text":"Log In To log into the gateway from a new device, navigate to \"http://gateway.local\" (whilst connected to the same local network), or your unique subdomain (e.g. \"https://foo.webthings.io\"), and enter your email address and password.","title":"Log In"},{"location":"gateway/log-in/#log-in","text":"To log into the gateway from a new device, navigate to \"http://gateway.local\" (whilst connected to the same local network), or your unique subdomain (e.g. \"https://foo.webthings.io\"), and enter your email address and password.","title":"Log In"},{"location":"gateway/log-out/","text":"Log Out To log out of your user account on the gateway, choose the \"Log out\" option from the main menu.","title":"Log Out"},{"location":"gateway/log-out/#log-out","text":"To log out of your user account on the gateway, choose the \"Log out\" option from the main menu.","title":"Log Out"},{"location":"gateway/logs/","text":"Logs The logging screen can be used to log values of properties over time and visualise that information on a graph. To navigate to the logs screen, choose the \"Logs\" option from the main menu. Add Log To add a log, click the \"+\" button at the bottom right of the screen. You will then see the new log screen. Choose a device whose property you would like to log Choose a numerical or boolean property you would like to log Choose how long you would like to retain logged data for before it is automatically deleted Click the \"Save\" button You will then be navigated to the view logs screen, with an empty graph representing the log you just created. \u26a0\ufe0f Warning: If saving logs to an SD card (e.g. on a Raspberry Pi), writing large quantities of data can shorten the life of your memory card. View Logs To view an individual log full screen, click its title from the view logs screen. The data in the log is represented as a line graph. You can set the timescale of the graph to \"minute\", \"hour\", \"day\" or \"week\" depending on the duration you'd like to view at any one time. You can then scroll through the logged data using the scrollbar at the bottom. Both numerical and boolean (true/false) types of property can be logged. The x axis will show the timescale, and the y axis will show the range and unit of the values. Logs are updated in real time, which you will notice when viewing the \"Minute\" time resolution because the graph will animate across the screen. \ud83d\udca1 Tip: You can hover over a data point to view its exact timestamp and value. Remove Log To remove a log, from the view log screen click the overflow menu at the bottom right of the screen and click the \"Remove\" option. You will then be shown a confirmation dialog which will confirm that you want to permanently delete the log. \u26a0\ufe0f Warning: Removing a log will also permanently delete all of its data.","title":"Logs"},{"location":"gateway/logs/#logs","text":"The logging screen can be used to log values of properties over time and visualise that information on a graph. To navigate to the logs screen, choose the \"Logs\" option from the main menu.","title":"Logs"},{"location":"gateway/logs/#add-log","text":"To add a log, click the \"+\" button at the bottom right of the screen. You will then see the new log screen. Choose a device whose property you would like to log Choose a numerical or boolean property you would like to log Choose how long you would like to retain logged data for before it is automatically deleted Click the \"Save\" button You will then be navigated to the view logs screen, with an empty graph representing the log you just created. \u26a0\ufe0f Warning: If saving logs to an SD card (e.g. on a Raspberry Pi), writing large quantities of data can shorten the life of your memory card.","title":"Add Log"},{"location":"gateway/logs/#view-logs","text":"To view an individual log full screen, click its title from the view logs screen. The data in the log is represented as a line graph. You can set the timescale of the graph to \"minute\", \"hour\", \"day\" or \"week\" depending on the duration you'd like to view at any one time. You can then scroll through the logged data using the scrollbar at the bottom. Both numerical and boolean (true/false) types of property can be logged. The x axis will show the timescale, and the y axis will show the range and unit of the values. Logs are updated in real time, which you will notice when viewing the \"Minute\" time resolution because the graph will animate across the screen. \ud83d\udca1 Tip: You can hover over a data point to view its exact timestamp and value.","title":"View Logs"},{"location":"gateway/logs/#remove-log","text":"To remove a log, from the view log screen click the overflow menu at the bottom right of the screen and click the \"Remove\" option. You will then be shown a confirmation dialog which will confirm that you want to permanently delete the log. \u26a0\ufe0f Warning: Removing a log will also permanently delete all of its data.","title":"Remove Log"},{"location":"gateway/rules/","text":"Rules The rules screen provides a drag and drop graphical user interface to create \"if this then that\" style rules to automate your home. For example, if you want a light to turn on when motion is detected in a room, or sound an alarm when a door is opened. To navigate to the rules screen, select the Rules option from the main menu. Add Rule To create a rule, click the \"+\" button at the bottom right hand corner of the screen. You will then see the new rule screen where you can choose one or more inputs, one or more outputs and give the rule a name. Properties and events of devices can be used as inputs, and properties and actions can be used as outputs. Input and Output First, drag and drop a device from the collection of devices at the bottom to the left hand side of the rule area to choose the input device for the rule. Next, drag and drop a device from the collection of devices at the bottom to the right hand side of the rule area to choose the output device for the rule. Next, choose the input property or event which will trigger the rule. \ud83d\udca1 Tip: As well as device properties and events, you can also use time as an input to trigger a rule at a particular time of day. To do this, drag and drop the the built-in \"Clock\" device as an input. \ud83d\uddd2\ufe0f Note: For numerical properties you can choose a threshold above or below which the rule is triggered. Next, choose the output property value or action to use as an output. \ud83d\uddd2\ufe0f Note: For numerical properties you can specify the precise value to set the property to when the rule is triggered. Finally, provide a name for the rule by clicking on \"Rule Name\" at the top of the screen and editing the name. You will now see the completed rule, with a line linking the input and output as well as a textual description of the rule. Click the back button at the top right of the screen to go back to the rules screen and you'll see your new rule has been created. If/While By default, rules use an \"if\" conditional which is triggered when a property transitions to a given value or an event is emitted. There is also a subtly different \"while\" conditional. If you want an output condition to continue until an input condition stops being true, but then revert back to its previous state (e.g. for a light to remain illuminated whilst a button is pressed), then you can instead choose the \"while\" option in the textual description of the rule. And/Or When selecting multiple inputs for a rule, you can choose whether all conditions need to be true for the rule to be triggered, or just one of them. To only trigger the rule if all of the input conditions are true, select the \"and\" option in the textual description of the rule. To trigger the rule if any of the input conditions are true, select the \"or\" option in the textual description of the rule. View Rules To view all of your rules, select the \"Rules\" option from the main menu. Each rule is represented by a card which shows the name and description of the rule and icons illustrating the inputs and outputs it uses. A rule can be toggled on and off using the on/off button. This can be useful for temporarily enabling or disabling a rule (e.g. to arm or disarm an alarm system). \ud83d\uddd2\ufe0f Note: If a rule is missing a valid input or output, or one of the devices used as an input or output has been removed from the gateway, the rule may show as \"invalid\". Edit Rule To edit a rule, hover over its card in the rules view and click the \"Edit Rule\" button. This will take you to the edit rule screen, which is the same as the new rule screen. Once you have finished editing ther rule, click the back button to go back to the rules screen. Your changes will be saved automatically. Remove Rule To remove a rule you can either hover over its card in the rule screen and press the \"x\" button, or press the trash can icon in the edit rule screen. Either way you will be shown a remove rule confirmation dialog. Click \"Remove Rule\" to delete it.","title":"Rules"},{"location":"gateway/rules/#rules","text":"The rules screen provides a drag and drop graphical user interface to create \"if this then that\" style rules to automate your home. For example, if you want a light to turn on when motion is detected in a room, or sound an alarm when a door is opened. To navigate to the rules screen, select the Rules option from the main menu.","title":"Rules"},{"location":"gateway/rules/#add-rule","text":"To create a rule, click the \"+\" button at the bottom right hand corner of the screen. You will then see the new rule screen where you can choose one or more inputs, one or more outputs and give the rule a name. Properties and events of devices can be used as inputs, and properties and actions can be used as outputs.","title":"Add Rule"},{"location":"gateway/rules/#input-and-output","text":"First, drag and drop a device from the collection of devices at the bottom to the left hand side of the rule area to choose the input device for the rule. Next, drag and drop a device from the collection of devices at the bottom to the right hand side of the rule area to choose the output device for the rule. Next, choose the input property or event which will trigger the rule. \ud83d\udca1 Tip: As well as device properties and events, you can also use time as an input to trigger a rule at a particular time of day. To do this, drag and drop the the built-in \"Clock\" device as an input. \ud83d\uddd2\ufe0f Note: For numerical properties you can choose a threshold above or below which the rule is triggered. Next, choose the output property value or action to use as an output. \ud83d\uddd2\ufe0f Note: For numerical properties you can specify the precise value to set the property to when the rule is triggered. Finally, provide a name for the rule by clicking on \"Rule Name\" at the top of the screen and editing the name. You will now see the completed rule, with a line linking the input and output as well as a textual description of the rule. Click the back button at the top right of the screen to go back to the rules screen and you'll see your new rule has been created.","title":"Input and Output"},{"location":"gateway/rules/#ifwhile","text":"By default, rules use an \"if\" conditional which is triggered when a property transitions to a given value or an event is emitted. There is also a subtly different \"while\" conditional. If you want an output condition to continue until an input condition stops being true, but then revert back to its previous state (e.g. for a light to remain illuminated whilst a button is pressed), then you can instead choose the \"while\" option in the textual description of the rule.","title":"If/While"},{"location":"gateway/rules/#andor","text":"When selecting multiple inputs for a rule, you can choose whether all conditions need to be true for the rule to be triggered, or just one of them. To only trigger the rule if all of the input conditions are true, select the \"and\" option in the textual description of the rule. To trigger the rule if any of the input conditions are true, select the \"or\" option in the textual description of the rule.","title":"And/Or"},{"location":"gateway/rules/#view-rules","text":"To view all of your rules, select the \"Rules\" option from the main menu. Each rule is represented by a card which shows the name and description of the rule and icons illustrating the inputs and outputs it uses. A rule can be toggled on and off using the on/off button. This can be useful for temporarily enabling or disabling a rule (e.g. to arm or disarm an alarm system). \ud83d\uddd2\ufe0f Note: If a rule is missing a valid input or output, or one of the devices used as an input or output has been removed from the gateway, the rule may show as \"invalid\".","title":"View Rules"},{"location":"gateway/rules/#edit-rule","text":"To edit a rule, hover over its card in the rules view and click the \"Edit Rule\" button. This will take you to the edit rule screen, which is the same as the new rule screen. Once you have finished editing ther rule, click the back button to go back to the rules screen. Your changes will be saved automatically.","title":"Edit Rule"},{"location":"gateway/rules/#remove-rule","text":"To remove a rule you can either hover over its card in the rule screen and press the \"x\" button, or press the trash can icon in the edit rule screen. Either way you will be shown a remove rule confirmation dialog. Click \"Remove Rule\" to delete it.","title":"Remove Rule"},{"location":"gateway/settings/","text":"Settings The settings view enables you to customise the settings of your gateway device. To navigate to the settings view, select the \"Settings\" option from the main menu. You will then see the settings menu, which lists the different types of settings that can be configured: Domain Network Users Add-ons Localisation Updates Authorisations Experiments Developer \ud83d\uddd2\ufe0f Note: The available settings will vary slightly depending on which platform (hardware and operating system) you are running the gateway application on. Domain The domain settings allow you to customise how your gateway is accessed on local and remote networks. Local Access By default, your gateway will be accessible on your local network at the \"gateway.local\" local domain. To edit the local domain type a new value into the text box and click \"Update host name\". To disable access via a local domain, un-tick the \"Local Access\" checkbox. \ud83d\udd27 Technical Note: The local domain is broadcast using mDNS/DNS-SD. Not all operating systems (e.g. some versions of Microsoft Windows) support this out of the box , so you may need to install additional software on your client device in order to access the gateway's local domain. Remote Access The remote access section tells you whether the webthings.io remote access service is configured on this gateway, to provide a secure tunnel to remotely access the gateway over the internet using a custom subdomain. If the remote access service has been configured, then the custom subdomain will be displayed here. \ud83d\uddd2\ufe0f Note: It's not currently possible to configure the remote access service after first time setup. \ud83d\udd27 Technical Note: For technical information about how the remote access service works, see here . Network Network settings allow you to configure the local networks your gateway is connected to via Ethernet and Wi-Fi. The Network Settings screen shows an overview of current network settings, including any IP addresses assigned to the gateway, and the name of the Wi-Fi network (if any) the gateway is connected to. Ethernet To configure Ethernet settings, click the \"Configure\" button under the Ethernet section of the Network Settings view. By default the gateway will automatically request a local IP address from a DHCP server. If you want to you can choose to manually set an IP address instead by choosing the \"Manual (Static IP)\" option. \u26a0\ufe0f Warning: Please only change these settings if you know what you are doing. If you configure a static IP address incorrectly, it may render the gateway inaccessible on the local network. You will then need to re-configure the network settings manually on the command line. Wi-Fi To configure Wi-Fi settings, click the \"Configure\" button under the Wi-Fi section of the Network Settings view. The Wi-Fi settings view will display a list of Wi-Fi networks that can be detected nearby, including their signal strength and whether they are open or secured. If the gateway is connected to one of these networks it will say \"Connected\" in green writing. To connect to a Wi-Fi network, click on its entry in the list. If the network requires a password or pass key, you will be prompted to enter one before clicking \"Connect\". \ud83d\uddd2\ufe0f Note: If the gateway fails to connect to the configured Wi-Fi network, it may switch to the Wi-Fi hotspot mode from first time setup to enable you to re-connect to a Wi-Fi network. Users The users screen allows you to manage user accounts of people who have access to the gateway. You will have created the first user account during first time setup, but you can add as many user accounts as you like. View Users The users screen shows a list of user accounts and their names and email addresses. Add User To add a user account, click the \"+\" button at the bottom right of the Users screen. You will then be prompted to enter a name, email address, password and password confirmation, before clicking \"Save\". The new user will then appear on the list of users on the users screen. \ud83d\uddd2\ufe0f Note: Currently all user accounts are given equal and full access to the gateway, including the ability to add and remove other users. Only provide a user account to someone you trust. Edit User To edit a user account, click the \"Edit\" button on its item in the list of users. You can change the name and email address of the user by editing the corresponding text fields. To change the user's password you will need to enter their current password, a new password, and confirmation of the new password. Once you have finished making changes, click the \"Save\" button. Two-factor Authentication To enable two-factor authentication for the user as an additional layer of security, click the \"Enable two-factor authentication\" checkbox at the bottom of the Edit User screen. You will then be presented with a QR code to scan in your two-factor authenticator app. If the QR code doesn't work, you can use the TOTP secret text string instead. You will need to enter the code produced by your authenticator app in the provided text box and click \"Verify\" to confirm. From this point on this user will need two-factor authentication to log in to their account. Remove User To remove a user click the \"Remove\" button next to their entry in the users list. \u26a0\ufe0f Warning: The user will be deleted immediately, with no confirmation and no way to undo the deletion. Add-ons The gateway has an add-ons system which enables users to add additional capabilities or customisations. There are three different types of add-ons: Adapter Add-ons - Add compatibility with additional types of devices or protocols Notification Add-ons - Add additional mechanisms to send notifications to users Extension Add-ons - Customise the user interface of the gateway By default only the Zigbee, Z-Wave and Web Thing adapter add-ons are installed but there are over a hundred other community-contributed add-ons to choose from. \ud83d\uddd2\ufe0f Note: The add-ons available in the add-ons directory are contributed by the WebThings community. To learn how to create your own add-on or contribute to an existing add-on, see Add-on Development . View Add-ons To access the add-ons screen, select the \"Add-ons\" option from the settings menu. This screen shows a list of currently installed add-ons including their name, description, version number, author and license. \ud83d\uddd2\ufe0f Note: Add-ons are automatically updated when a new version is submitted to the directory by the add-on author. Add Add-on To install an add-on, click the \"+\" button at the bottom right of the add-ons screen. You will be presented with a list of available add-ons from the community maintained add-on directory. To install one of the available add-ons, click the \"Add\" button on its entry in the list. \u26a0\ufe0f Warning: Whilst the communtity makes an effort to try to review new add-ons to check they do what they say they do, we can not guarantee that an add-on from the a third party is safe to use. It's up to users to decide whether they trust the author of any given add-on. If you see the word \"Added\" instead of an \"Add\" button, it means that add-on has already been installed. Whilst the add-on is installing you will see the word \"Installing...\". Once the add-on has been successfully installed you will see the word \"Added\". If you click the back button at the top left of the screen, you should then see the add-on you installed appear in the list. \ud83d\udca1 Tip: You can filter the names of add-ons by typing into the \"Search\" box at the top of the list. Enable/disable Add-on You can temporarily disable an add-on by clicking the \"Disable\" button on its entry in the add-on list, and re-enable it again by clicking \"Enable\". Remove Add-on To remove an add-on click the \"Remove\" button. \u26a0\ufe0f Warning: Clicking the \"remove\" button will automatically remove an add-on without requiring any confirmation, which may result in the loss of data. Configure Add-on Some add-ons have additional configuration options available via a \"Configure\" button. These options are unique to each add-on. Localisation The Localisation section allows you to customise the gateway user interface to match your locale. Configuration options include: Country - This is used, amongst other things, to set the country code in Wi-Fi settings Timezone - This is important to ensure that rules execute at the time you expect Language - This is used to customise the language used in the user interface Units - This is used to customise the preferred units used in the user interface \ud83d\uddd2\ufe0f Note: The WebThings Gateway user interface is translated into different languages (34 at the last count) by the WebThings community. You can contribute to these translations here . Updates The gateway supports automatic over-the-air updates whenever a new version of the gateway application is released. To see what version your gateway is running, click on the \"Updates\" option from the Settings screen. The Updates screen will tell you whether your gateway is up to date, or if a new version is available. It will also tell you the current version your gateway is running and when it was last updated. To disable automatic updates, un-tick the \"Enable automatic updates\" checkbox. \ud83d\udca1 Tip: We recommend that you keep automatic updates enabled so that you are always running the latest available version, which may include security fixes. Whilst it is possible to manually upgrade the gateway from the UI yourself, the process takes some time and users sometimes incorrectly think the process has frozen and reboot the gateway, which may leave it in a broken state. \ud83d\uddd2\ufe0f Note: This feature is currently only available for users who have installed WebThings Gateway using a Raspberry Pi OS-based image from our website. \u26a0\ufe0f Warning: The automatic update system does not currently update the underlying operating system, only the gateway application. It is the user's responsibility to keep the operating system (e.g. Raspberry Pi OS) up to date with security fixes. See the Raspberry Pi documentation for how to update Raspberry Pi OS. Authorisations It is possible to authorise third party web services to access the gateway's API (application programming interface), in order for them to provide additional functionality by monitoring and controlling devices via your gateway. When a service requests access, you can choose whether they just monitor devices, or monitor and control them, and also choose exactly which devices they have access to. To view a list of services you have authorised to access your gateway, choose the \"Authorisations\" option in the settings menu. You can revoke access from a given service at any time by clicking the \"Revoke\" button. Experiments From time to time, the WebThings community will create new experimental features for users to try out before they are fully complete. To see a list of experiments to enable or disable, click the \"Experiments\" option in the settings menu. Developer \u26a0\ufe0f Warning: Here be dragons! There some advanced settings available for developers including: Enabling command line access to the gateway on the local network via SSH Viewing internal system logs for use during debugging Issuing local API tokens (JSON Web Tokens) for use during development","title":"Settings"},{"location":"gateway/settings/#settings","text":"The settings view enables you to customise the settings of your gateway device. To navigate to the settings view, select the \"Settings\" option from the main menu. You will then see the settings menu, which lists the different types of settings that can be configured: Domain Network Users Add-ons Localisation Updates Authorisations Experiments Developer \ud83d\uddd2\ufe0f Note: The available settings will vary slightly depending on which platform (hardware and operating system) you are running the gateway application on.","title":"Settings"},{"location":"gateway/settings/#domain","text":"The domain settings allow you to customise how your gateway is accessed on local and remote networks.","title":"Domain"},{"location":"gateway/settings/#local-access","text":"By default, your gateway will be accessible on your local network at the \"gateway.local\" local domain. To edit the local domain type a new value into the text box and click \"Update host name\". To disable access via a local domain, un-tick the \"Local Access\" checkbox. \ud83d\udd27 Technical Note: The local domain is broadcast using mDNS/DNS-SD. Not all operating systems (e.g. some versions of Microsoft Windows) support this out of the box , so you may need to install additional software on your client device in order to access the gateway's local domain.","title":"Local Access"},{"location":"gateway/settings/#remote-access","text":"The remote access section tells you whether the webthings.io remote access service is configured on this gateway, to provide a secure tunnel to remotely access the gateway over the internet using a custom subdomain. If the remote access service has been configured, then the custom subdomain will be displayed here. \ud83d\uddd2\ufe0f Note: It's not currently possible to configure the remote access service after first time setup. \ud83d\udd27 Technical Note: For technical information about how the remote access service works, see here .","title":"Remote Access"},{"location":"gateway/settings/#network","text":"Network settings allow you to configure the local networks your gateway is connected to via Ethernet and Wi-Fi. The Network Settings screen shows an overview of current network settings, including any IP addresses assigned to the gateway, and the name of the Wi-Fi network (if any) the gateway is connected to.","title":"Network"},{"location":"gateway/settings/#ethernet","text":"To configure Ethernet settings, click the \"Configure\" button under the Ethernet section of the Network Settings view. By default the gateway will automatically request a local IP address from a DHCP server. If you want to you can choose to manually set an IP address instead by choosing the \"Manual (Static IP)\" option. \u26a0\ufe0f Warning: Please only change these settings if you know what you are doing. If you configure a static IP address incorrectly, it may render the gateway inaccessible on the local network. You will then need to re-configure the network settings manually on the command line.","title":"Ethernet"},{"location":"gateway/settings/#wi-fi","text":"To configure Wi-Fi settings, click the \"Configure\" button under the Wi-Fi section of the Network Settings view. The Wi-Fi settings view will display a list of Wi-Fi networks that can be detected nearby, including their signal strength and whether they are open or secured. If the gateway is connected to one of these networks it will say \"Connected\" in green writing. To connect to a Wi-Fi network, click on its entry in the list. If the network requires a password or pass key, you will be prompted to enter one before clicking \"Connect\". \ud83d\uddd2\ufe0f Note: If the gateway fails to connect to the configured Wi-Fi network, it may switch to the Wi-Fi hotspot mode from first time setup to enable you to re-connect to a Wi-Fi network.","title":"Wi-Fi"},{"location":"gateway/settings/#users","text":"The users screen allows you to manage user accounts of people who have access to the gateway. You will have created the first user account during first time setup, but you can add as many user accounts as you like.","title":"Users"},{"location":"gateway/settings/#view-users","text":"The users screen shows a list of user accounts and their names and email addresses.","title":"View Users"},{"location":"gateway/settings/#add-user","text":"To add a user account, click the \"+\" button at the bottom right of the Users screen. You will then be prompted to enter a name, email address, password and password confirmation, before clicking \"Save\". The new user will then appear on the list of users on the users screen. \ud83d\uddd2\ufe0f Note: Currently all user accounts are given equal and full access to the gateway, including the ability to add and remove other users. Only provide a user account to someone you trust.","title":"Add User"},{"location":"gateway/settings/#edit-user","text":"To edit a user account, click the \"Edit\" button on its item in the list of users. You can change the name and email address of the user by editing the corresponding text fields. To change the user's password you will need to enter their current password, a new password, and confirmation of the new password. Once you have finished making changes, click the \"Save\" button.","title":"Edit User"},{"location":"gateway/settings/#two-factor-authentication","text":"To enable two-factor authentication for the user as an additional layer of security, click the \"Enable two-factor authentication\" checkbox at the bottom of the Edit User screen. You will then be presented with a QR code to scan in your two-factor authenticator app. If the QR code doesn't work, you can use the TOTP secret text string instead. You will need to enter the code produced by your authenticator app in the provided text box and click \"Verify\" to confirm. From this point on this user will need two-factor authentication to log in to their account.","title":"Two-factor Authentication"},{"location":"gateway/settings/#remove-user","text":"To remove a user click the \"Remove\" button next to their entry in the users list. \u26a0\ufe0f Warning: The user will be deleted immediately, with no confirmation and no way to undo the deletion.","title":"Remove User"},{"location":"gateway/settings/#add-ons","text":"The gateway has an add-ons system which enables users to add additional capabilities or customisations. There are three different types of add-ons: Adapter Add-ons - Add compatibility with additional types of devices or protocols Notification Add-ons - Add additional mechanisms to send notifications to users Extension Add-ons - Customise the user interface of the gateway By default only the Zigbee, Z-Wave and Web Thing adapter add-ons are installed but there are over a hundred other community-contributed add-ons to choose from. \ud83d\uddd2\ufe0f Note: The add-ons available in the add-ons directory are contributed by the WebThings community. To learn how to create your own add-on or contribute to an existing add-on, see Add-on Development .","title":"Add-ons"},{"location":"gateway/settings/#view-add-ons","text":"To access the add-ons screen, select the \"Add-ons\" option from the settings menu. This screen shows a list of currently installed add-ons including their name, description, version number, author and license. \ud83d\uddd2\ufe0f Note: Add-ons are automatically updated when a new version is submitted to the directory by the add-on author.","title":"View Add-ons"},{"location":"gateway/settings/#add-add-on","text":"To install an add-on, click the \"+\" button at the bottom right of the add-ons screen. You will be presented with a list of available add-ons from the community maintained add-on directory. To install one of the available add-ons, click the \"Add\" button on its entry in the list. \u26a0\ufe0f Warning: Whilst the communtity makes an effort to try to review new add-ons to check they do what they say they do, we can not guarantee that an add-on from the a third party is safe to use. It's up to users to decide whether they trust the author of any given add-on. If you see the word \"Added\" instead of an \"Add\" button, it means that add-on has already been installed. Whilst the add-on is installing you will see the word \"Installing...\". Once the add-on has been successfully installed you will see the word \"Added\". If you click the back button at the top left of the screen, you should then see the add-on you installed appear in the list. \ud83d\udca1 Tip: You can filter the names of add-ons by typing into the \"Search\" box at the top of the list.","title":"Add Add-on"},{"location":"gateway/settings/#enabledisable-add-on","text":"You can temporarily disable an add-on by clicking the \"Disable\" button on its entry in the add-on list, and re-enable it again by clicking \"Enable\".","title":"Enable/disable Add-on"},{"location":"gateway/settings/#remove-add-on","text":"To remove an add-on click the \"Remove\" button. \u26a0\ufe0f Warning: Clicking the \"remove\" button will automatically remove an add-on without requiring any confirmation, which may result in the loss of data.","title":"Remove Add-on"},{"location":"gateway/settings/#configure-add-on","text":"Some add-ons have additional configuration options available via a \"Configure\" button. These options are unique to each add-on.","title":"Configure Add-on"},{"location":"gateway/settings/#localisation","text":"The Localisation section allows you to customise the gateway user interface to match your locale. Configuration options include: Country - This is used, amongst other things, to set the country code in Wi-Fi settings Timezone - This is important to ensure that rules execute at the time you expect Language - This is used to customise the language used in the user interface Units - This is used to customise the preferred units used in the user interface \ud83d\uddd2\ufe0f Note: The WebThings Gateway user interface is translated into different languages (34 at the last count) by the WebThings community. You can contribute to these translations here .","title":"Localisation"},{"location":"gateway/settings/#updates","text":"The gateway supports automatic over-the-air updates whenever a new version of the gateway application is released. To see what version your gateway is running, click on the \"Updates\" option from the Settings screen. The Updates screen will tell you whether your gateway is up to date, or if a new version is available. It will also tell you the current version your gateway is running and when it was last updated. To disable automatic updates, un-tick the \"Enable automatic updates\" checkbox. \ud83d\udca1 Tip: We recommend that you keep automatic updates enabled so that you are always running the latest available version, which may include security fixes. Whilst it is possible to manually upgrade the gateway from the UI yourself, the process takes some time and users sometimes incorrectly think the process has frozen and reboot the gateway, which may leave it in a broken state. \ud83d\uddd2\ufe0f Note: This feature is currently only available for users who have installed WebThings Gateway using a Raspberry Pi OS-based image from our website. \u26a0\ufe0f Warning: The automatic update system does not currently update the underlying operating system, only the gateway application. It is the user's responsibility to keep the operating system (e.g. Raspberry Pi OS) up to date with security fixes. See the Raspberry Pi documentation for how to update Raspberry Pi OS.","title":"Updates"},{"location":"gateway/settings/#authorisations","text":"It is possible to authorise third party web services to access the gateway's API (application programming interface), in order for them to provide additional functionality by monitoring and controlling devices via your gateway. When a service requests access, you can choose whether they just monitor devices, or monitor and control them, and also choose exactly which devices they have access to. To view a list of services you have authorised to access your gateway, choose the \"Authorisations\" option in the settings menu. You can revoke access from a given service at any time by clicking the \"Revoke\" button.","title":"Authorisations"},{"location":"gateway/settings/#experiments","text":"From time to time, the WebThings community will create new experimental features for users to try out before they are fully complete. To see a list of experiments to enable or disable, click the \"Experiments\" option in the settings menu.","title":"Experiments"},{"location":"gateway/settings/#developer","text":"\u26a0\ufe0f Warning: Here be dragons! There some advanced settings available for developers including: Enabling command line access to the gateway on the local network via SSH Viewing internal system logs for use during debugging Issuing local API tokens (JSON Web Tokens) for use during development","title":"Developer"},{"location":"gateway/setup/","text":"First Time Setup The first time your gateway boots it will require some configuration. 1. Connect Wi-Fi (Optional) When the gateway starts up it will create a Wi-Fi hotspot called \" WebThings Gateway XXXX \" (where XXXX are four digits from your Raspberry Pi's MAC address). Use a smartphone, tablet or desktop computer to scan for and connect to that wireless network. A captive portal page will appear, showing nearby Wi-Fi networks. Select the desired network and enter a password if prompted. The \"Connecting to Wi-Fi...\" page should automatically disappear. Or to skip connecting to a Wi-Fi network (if already connected via Ethernet), click the \"Skip\" button (you can reconfigure Wi-Fi later from Settings ). After you've connected your gateway to a wireless network, you should ensure that your smartphone, tablet or desktop computer is connected to the same Wi-Fi network and then navigate to http://gateway.local in your web browser to access the gateway's web interface. \ud83d\uddd2\ufe0f Notes: If you are connected to the \"WebThings Gateway XXXX\" Wi-Fi network but you don't see the captive portal, you can try typing \"http://192.168.2.1\" into your web browser's address bar to manually navigate to the page. As an alternative to Wi-Fi, you can connect the Raspberry Pi to your home network using an Ethernet cable and it will attempt to automatically get an IP address from your router. If you're not able to access \"http://gateway.local\" (e.g. on Microsoft Windows), you may need to look up the IP address assigned to the Raspberry Pi by your router (look for a hostname of \u201cgateway\u201d or a MAC address starting with \u201cb8:27:eb\u201d), and type that into the address bar of your web browser instead. If neither \"http://gateway.local\" or \"http://{IP ADDRESS}\" will load in your browser, check to make sure your computer is definitely connected to the same network you connected the gateway to. If you move the gateway to another location and it can no longer access your home network, it will revert to access point mode so you can connect to it and re-configure a different network. 2. Register a Subdomain (Optional) When you load \"http://gateway.local\" for the first time, you will be given the option to register a free subdomain to safely access your gateway over the Internet using a secure tunnelling service. Enter your choice of subdomain and an email address in case you need to retrieve your subdomain later to re-install on a new gateway. You will also need to agree to the WebThings Privacy Policy and Terms of Service in order to use the back end services provided by the community. Click \u201cCreate\u201d and wait a few moments for the subdomain registration to complete. You should then be redirected to your new subdomain. \ud83d\uddd2\ufe0f Notes: You can choose to skip this step (either to only use the gateway locally on your home network or manually configure DNS yourself), but note that currently if you do skip this step you\u2019ll have to re-flash the gateway in order to register a subdomain If you have previously registered a subdomain you want to re-use, enter the subdomain and the email address you used to register it and follow the on-screen instructions to re-claim it 3. Create a User Account The gateway will next prompt you to create your first user account. Enter a name, email address and a password and click \"Next\". \ud83d\uddd2\ufe0f Note: You can create additional user accounts later. Success! Once your user account has been successfully created, you will be automatically logged in to the gateway and you should see an empty Things screen, ready for you to start adding devices.","title":"First Time Setup"},{"location":"gateway/setup/#first-time-setup","text":"The first time your gateway boots it will require some configuration.","title":"First Time Setup"},{"location":"gateway/setup/#1-connect-wi-fi-optional","text":"When the gateway starts up it will create a Wi-Fi hotspot called \" WebThings Gateway XXXX \" (where XXXX are four digits from your Raspberry Pi's MAC address). Use a smartphone, tablet or desktop computer to scan for and connect to that wireless network. A captive portal page will appear, showing nearby Wi-Fi networks. Select the desired network and enter a password if prompted. The \"Connecting to Wi-Fi...\" page should automatically disappear. Or to skip connecting to a Wi-Fi network (if already connected via Ethernet), click the \"Skip\" button (you can reconfigure Wi-Fi later from Settings ). After you've connected your gateway to a wireless network, you should ensure that your smartphone, tablet or desktop computer is connected to the same Wi-Fi network and then navigate to http://gateway.local in your web browser to access the gateway's web interface. \ud83d\uddd2\ufe0f Notes: If you are connected to the \"WebThings Gateway XXXX\" Wi-Fi network but you don't see the captive portal, you can try typing \"http://192.168.2.1\" into your web browser's address bar to manually navigate to the page. As an alternative to Wi-Fi, you can connect the Raspberry Pi to your home network using an Ethernet cable and it will attempt to automatically get an IP address from your router. If you're not able to access \"http://gateway.local\" (e.g. on Microsoft Windows), you may need to look up the IP address assigned to the Raspberry Pi by your router (look for a hostname of \u201cgateway\u201d or a MAC address starting with \u201cb8:27:eb\u201d), and type that into the address bar of your web browser instead. If neither \"http://gateway.local\" or \"http://{IP ADDRESS}\" will load in your browser, check to make sure your computer is definitely connected to the same network you connected the gateway to. If you move the gateway to another location and it can no longer access your home network, it will revert to access point mode so you can connect to it and re-configure a different network.","title":"1. Connect Wi-Fi (Optional)"},{"location":"gateway/setup/#2-register-a-subdomain-optional","text":"When you load \"http://gateway.local\" for the first time, you will be given the option to register a free subdomain to safely access your gateway over the Internet using a secure tunnelling service. Enter your choice of subdomain and an email address in case you need to retrieve your subdomain later to re-install on a new gateway. You will also need to agree to the WebThings Privacy Policy and Terms of Service in order to use the back end services provided by the community. Click \u201cCreate\u201d and wait a few moments for the subdomain registration to complete. You should then be redirected to your new subdomain. \ud83d\uddd2\ufe0f Notes: You can choose to skip this step (either to only use the gateway locally on your home network or manually configure DNS yourself), but note that currently if you do skip this step you\u2019ll have to re-flash the gateway in order to register a subdomain If you have previously registered a subdomain you want to re-use, enter the subdomain and the email address you used to register it and follow the on-screen instructions to re-claim it","title":"2. Register a Subdomain (Optional)"},{"location":"gateway/setup/#3-create-a-user-account","text":"The gateway will next prompt you to create your first user account. Enter a name, email address and a password and click \"Next\". \ud83d\uddd2\ufe0f Note: You can create additional user accounts later. Success! Once your user account has been successfully created, you will be automatically logged in to the gateway and you should see an empty Things screen, ready for you to start adding devices.","title":"3. Create a User Account"},{"location":"gateway/supported-hardware/","text":"Supported Hardware To see a community-maintained list of hardware known to work with WebThings Gateway, see this wiki page .","title":"Supported Hardware"},{"location":"gateway/supported-hardware/#supported-hardware","text":"To see a community-maintained list of hardware known to work with WebThings Gateway, see this wiki page .","title":"Supported Hardware"},{"location":"gateway/things/","text":"Things On the WebThings platform, connected devices are referred to as \"things\". Add Thing To add a thing to your gateway, click the \"+\" button on the Things screen. This will tell the gateway to start scanning for new devices. \ud83d\uddd2\ufe0f Note: Many smart home devices will require the user to press a pairing button of some kind in order to initiate a pairing mode. You should follow any instructions that came with your device to enable pairing mode before clicking the \"+\" button. A preview of any discovered devices will appear on the screen. When a device has multiple capabilities (e.g. it acts as both an on/off switch and an energy monitor) you can choose the primary function to display in the user interface from a drop-down menu. You can also change the name of the device to something meaningful to you (e.g. \"Kitchen Light\") before clicking \"Save\" to add it to the gateway. If you click the back button at the top left of the screen to go back to the Things screen, you should now see an icon representing the device you added. \ud83d\uddd2\ufe0f Note: Only the Zigbee, Z-Wave and Web Thing add-on adapters are installed by default. To support other types of devices, you will need to install additional add-ons . Add Thing by URL In addition to scanning for new devices, you can manually add a new thing by its \"web thing URL\". That is the URL of a Web Thing Description . \ud83d\udd27 Technical Note: Currently the gateway only supports Web Thing Description s following the legacy Mozilla format. There is a work-in-progress add-on adapter for supporting W3C WoT compliant Thing Descriptions. To add a thing by a web thing URL, click the \"Add by URL\" link on the Add Thing screen. A form will then appear with a text box into which you can paste a web thing URL. Click \"Submit\" to retrieve details about the Thing, then click \"Save\" to add it to the gateway. View Things To view all of your things, select the \"Things\" option from the main menu. Each thing is represented by an icon. The icon shows a live overview of the current state of the thing (e.g. its on/off state or the current value of a key property). Different styles of icon are used for different types of devices. Thing Detail To view the properties and actions of a thing, click on the small round detail button at the top right of a thing icon. This will navigate to its detail view. The detail view will show you all of the properties and actions associated with a device. Properties Properties may be read-only (e.g. a temperature reading) or writable (e.g. an on/off state which can be toggled with a switch, or a level which can be set with a slider). There are many different types of properties for different types of devices, which each have a specialised user interface. Actions Actions are represented by a button and may accept one or more input values (e.g. a percentage to fade a light to over a specified number of seconds). To provide inputs to an action, click the action's button on the thing detail view and complete the fields in the form which appears before pressing the submit button. If an action doesn't require any inputs then pressing its button will immediately invoke the action. Events To view a log of events emitted by a thing, click the overflow menu button at the bottom right of the screen and select the \"Event log\" option. You will then be shown a live log of events being emitted by the device, including event data and timestamps. \ud83d\udd27 Technical note : The gateway's adapter add-ons are responsible for mapping various devices and protocols to an extensible set of \" WoT capability schemas \". These schemas are represented in a machine-readable format via semantic annotations on a Thing Description. Thing Descriptions are then used by the gateway to generate a rich user interface for each type of device capability, property, action and event. Edit Thing To edit a thing, select the \"Edit\" option from the thing detail overflow menu at the bottom right of the screen. You can then edit the name of the thing and/or its primary device type before clicking \"Save\" to save your changes. Remove Thing To remove a thing, select the \"Remove\" option from the thing detail overflow menu at the bottom right of the screen. You will then be asked to confirm the removal of the device from the gateway. \ud83d\uddd2\ufe0f Note: Whilst removing a device from the gateway using the remove thing feature will remove it from the gateway user interface, it might not always fully un-pair it from the gateway at the hardware level (e.g. if using a USB dongle). Sometimes a device will have an un-pairing procedure which needs to be followed in order to full disassociate it from the gateway (e.g. involving pressing a button on the device).","title":"Things"},{"location":"gateway/things/#things","text":"On the WebThings platform, connected devices are referred to as \"things\".","title":"Things"},{"location":"gateway/things/#add-thing","text":"To add a thing to your gateway, click the \"+\" button on the Things screen. This will tell the gateway to start scanning for new devices. \ud83d\uddd2\ufe0f Note: Many smart home devices will require the user to press a pairing button of some kind in order to initiate a pairing mode. You should follow any instructions that came with your device to enable pairing mode before clicking the \"+\" button. A preview of any discovered devices will appear on the screen. When a device has multiple capabilities (e.g. it acts as both an on/off switch and an energy monitor) you can choose the primary function to display in the user interface from a drop-down menu. You can also change the name of the device to something meaningful to you (e.g. \"Kitchen Light\") before clicking \"Save\" to add it to the gateway. If you click the back button at the top left of the screen to go back to the Things screen, you should now see an icon representing the device you added. \ud83d\uddd2\ufe0f Note: Only the Zigbee, Z-Wave and Web Thing add-on adapters are installed by default. To support other types of devices, you will need to install additional add-ons .","title":"Add Thing"},{"location":"gateway/things/#add-thing-by-url","text":"In addition to scanning for new devices, you can manually add a new thing by its \"web thing URL\". That is the URL of a Web Thing Description . \ud83d\udd27 Technical Note: Currently the gateway only supports Web Thing Description s following the legacy Mozilla format. There is a work-in-progress add-on adapter for supporting W3C WoT compliant Thing Descriptions. To add a thing by a web thing URL, click the \"Add by URL\" link on the Add Thing screen. A form will then appear with a text box into which you can paste a web thing URL. Click \"Submit\" to retrieve details about the Thing, then click \"Save\" to add it to the gateway.","title":"Add Thing by URL"},{"location":"gateway/things/#view-things","text":"To view all of your things, select the \"Things\" option from the main menu. Each thing is represented by an icon. The icon shows a live overview of the current state of the thing (e.g. its on/off state or the current value of a key property). Different styles of icon are used for different types of devices.","title":"View Things"},{"location":"gateway/things/#thing-detail","text":"To view the properties and actions of a thing, click on the small round detail button at the top right of a thing icon. This will navigate to its detail view. The detail view will show you all of the properties and actions associated with a device.","title":"Thing Detail"},{"location":"gateway/things/#properties","text":"Properties may be read-only (e.g. a temperature reading) or writable (e.g. an on/off state which can be toggled with a switch, or a level which can be set with a slider). There are many different types of properties for different types of devices, which each have a specialised user interface.","title":"Properties"},{"location":"gateway/things/#actions","text":"Actions are represented by a button and may accept one or more input values (e.g. a percentage to fade a light to over a specified number of seconds). To provide inputs to an action, click the action's button on the thing detail view and complete the fields in the form which appears before pressing the submit button. If an action doesn't require any inputs then pressing its button will immediately invoke the action.","title":"Actions"},{"location":"gateway/things/#events","text":"To view a log of events emitted by a thing, click the overflow menu button at the bottom right of the screen and select the \"Event log\" option. You will then be shown a live log of events being emitted by the device, including event data and timestamps. \ud83d\udd27 Technical note : The gateway's adapter add-ons are responsible for mapping various devices and protocols to an extensible set of \" WoT capability schemas \". These schemas are represented in a machine-readable format via semantic annotations on a Thing Description. Thing Descriptions are then used by the gateway to generate a rich user interface for each type of device capability, property, action and event.","title":"Events"},{"location":"gateway/things/#edit-thing","text":"To edit a thing, select the \"Edit\" option from the thing detail overflow menu at the bottom right of the screen. You can then edit the name of the thing and/or its primary device type before clicking \"Save\" to save your changes.","title":"Edit Thing"},{"location":"gateway/things/#remove-thing","text":"To remove a thing, select the \"Remove\" option from the thing detail overflow menu at the bottom right of the screen. You will then be asked to confirm the removal of the device from the gateway. \ud83d\uddd2\ufe0f Note: Whilst removing a device from the gateway using the remove thing feature will remove it from the gateway user interface, it might not always fully un-pair it from the gateway at the hardware level (e.g. if using a USB dongle). Sometimes a device will have an un-pairing procedure which needs to be followed in order to full disassociate it from the gateway (e.g. involving pressing a button on the device).","title":"Remove Thing"},{"location":"wot/architecture/","text":"WoT Architecture","title":"WoT Architecture"},{"location":"wot/architecture/#wot-architecture","text":"","title":"WoT Architecture"},{"location":"wot/discovery/","text":"WoT Discovery","title":"WoT Discovery"},{"location":"wot/discovery/#wot-discovery","text":"","title":"WoT Discovery"},{"location":"wot/introduction/","text":"W3C Web of Things The Web of Things (WoT) is defined by a collection of specifications standardised by the World Wide Web Consortium (W3C). According to the W3C, \"the Web of Things (WoT) seeks to counter the fragmentation of the IoT by using and extending existing, standardized Web technologies. By providing standardized metadata and other re-usable technological building blocks, W3C WoT enables easy integration across IoT platforms and application domains.\" The Web of Things is to the Internet of Things what the World Wide Web is to the Internet. It gives URLs to physical devices in the real world to make them linkable, provides a data model to describe them and a communication protocol to interact with them. The Web of Things can be used as a unifying application layer for the Internet of Things, linking together multiple underlying IoT protocols using existing web technologies. The core normative specifications (standards) which define the Web of Things are: WoT Architecture - Describes the building blocks of the Web of Things and how they fit together WoT Thing Description - Defines an information model and JSON-based serialisation format for describing the capabilities of connected devices in a protocol agnostic way WoT Discovery - Defines various mechanisms for discovering web things, including a Thing Description Directory WoT Profiles - Defines sets of prescriptive constraints called \"profiles\" to enable out-of-the-box interoperability between conformant web things and their consumers There are also some informative notes which provide additional guidance: WoT Binding Templates WoT Scripting API WoT Security and Privacy Guidelines These specifications were designed to fulfill a collection of Use Cases and Requirements originally defined by the Web of Things Interest Group . In addition to the specifications written by the WoT Working Group, there is a specification being incubated by the Web Thing Protocol Communtiy Group which defines a common protocol for the Web of Things called the Web Thing Protocol: Web Thing Protocol Use Cases & Requirements","title":"Introduction"},{"location":"wot/introduction/#w3c-web-of-things","text":"The Web of Things (WoT) is defined by a collection of specifications standardised by the World Wide Web Consortium (W3C). According to the W3C, \"the Web of Things (WoT) seeks to counter the fragmentation of the IoT by using and extending existing, standardized Web technologies. By providing standardized metadata and other re-usable technological building blocks, W3C WoT enables easy integration across IoT platforms and application domains.\" The Web of Things is to the Internet of Things what the World Wide Web is to the Internet. It gives URLs to physical devices in the real world to make them linkable, provides a data model to describe them and a communication protocol to interact with them. The Web of Things can be used as a unifying application layer for the Internet of Things, linking together multiple underlying IoT protocols using existing web technologies. The core normative specifications (standards) which define the Web of Things are: WoT Architecture - Describes the building blocks of the Web of Things and how they fit together WoT Thing Description - Defines an information model and JSON-based serialisation format for describing the capabilities of connected devices in a protocol agnostic way WoT Discovery - Defines various mechanisms for discovering web things, including a Thing Description Directory WoT Profiles - Defines sets of prescriptive constraints called \"profiles\" to enable out-of-the-box interoperability between conformant web things and their consumers There are also some informative notes which provide additional guidance: WoT Binding Templates WoT Scripting API WoT Security and Privacy Guidelines These specifications were designed to fulfill a collection of Use Cases and Requirements originally defined by the Web of Things Interest Group . In addition to the specifications written by the WoT Working Group, there is a specification being incubated by the Web Thing Protocol Communtiy Group which defines a common protocol for the Web of Things called the Web Thing Protocol: Web Thing Protocol Use Cases & Requirements","title":"W3C Web of Things"},{"location":"wot/profiles/","text":"WoT Profiles","title":"WoT Profiles"},{"location":"wot/profiles/#wot-profiles","text":"","title":"WoT Profiles"},{"location":"wot/thing-description/","text":"WoT Thing Description","title":"WoT Thing Description"},{"location":"wot/thing-description/#wot-thing-description","text":"","title":"WoT Thing Description"},{"location":"wot/web-thing-protocol/","text":"Web Thing Protocol","title":"Web Thing Protocol"},{"location":"wot/web-thing-protocol/#web-thing-protocol","text":"","title":"Web Thing Protocol"}]}